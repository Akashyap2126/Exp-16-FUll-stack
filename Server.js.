// Import express
const express = require('express');
const app = express();

// ------------------------------
// 1️⃣ Logging Middleware (Global)
// ------------------------------
// Logs method, URL, and timestamp for every request
const logMiddleware = (req, res, next) => {
  const timestamp = new Date().toISOString();
  console.log(`[${timestamp}] ${req.method} ${req.originalUrl}`);
  next();
};

// Apply logging middleware to all routes
app.use(logMiddleware);

// ------------------------------
// 2️⃣ Authentication Middleware
// ------------------------------
// Checks Authorization header for Bearer mysecrettoken
const authMiddleware = (req, res, next) => {
  const authHeader = req.headers['authorization'];

  if (!authHeader) {
    return res.status(401).json({ error: 'Authorization header missing' });
  }

  const parts = authHeader.split(' ');
  if (parts.length !== 2 || parts[0] !== 'Bearer') {
    return res.status(400).json({ error: 'Malformed Authorization header' });
  }

  const token = parts[1];
  if (token !== 'mysecrettoken') {
    return res.status(403).json({ error: 'Invalid or expired token' });
  }

  // If token is valid
  next();
};

// ------------------------------
// 3️⃣ Routes
// ------------------------------

// Public route (no authentication required)
app.get('/public', (req, res) => {
  res.json({ message: 'Public route: accessible without authentication.' });
});

// Protected route (requires valid token)
app.get('/protected', authMiddleware, (req, res) => {
  res.json({ message: 'Protected route: valid token received, access granted!' });
});

// ------------------------------
// 4️⃣ Start the server
// ------------------------------
const PORT = 3000;
app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
});
